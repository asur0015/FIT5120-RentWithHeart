# -*- coding: utf-8 -*-
"""final project recommendation model data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ylsJZa54Wmcci0Aq81e23iLpbeBuw2ZS
"""

from sklearn.preprocessing import StandardScaler
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

"""#data wragling"""

#rent = pd.read_csv('rental_data.csv')
#rent.head()

house = pd.read_csv('gpmedianrent.csv')
house.head()

house[house['Suburb'] == 'Haddon']

house['Suburb'] = house['Suburb'].apply(lambda x: x.lower())

house.head()

house = house.assign(Suburb=house['Suburb'].str.split('-')).explode('Suburb').reset_index(drop=True)

"""## Bus data"""

bus = pd.read_csv('busStops.csv')
bus.head()

bus = bus.loc[:,["STOP_ID", "Suburb"]]
bus.head

bus['Suburb'] = bus['Suburb'].apply(lambda x: x.lower())

bus.head()

gpbus = bus.groupby(by="Suburb").count().reset_index()
gpbus=gpbus[gpbus['Suburb']!= 'albury - nsw']

gpbus['Suburb'] = gpbus['Suburb'].replace({'3219':'east geelong'})
gpbus['Suburb'] = gpbus['Suburb'].replace({'3220':'south geelong'})
gpbus['Suburb'] = gpbus['Suburb'].replace({'3350':'nerrina'})

gpbus = gpbus.rename(columns={'STOP_ID': 'No_of_bus_stop'})

gpbus.head(10)

"""## station data"""

station = pd.read_csv('station_data.csv')
station.head()

station = station.loc[:,["STOP_ID", "Suburb"]]

station['Suburb'] = station['Suburb'].apply(lambda x: x.lower())

station.head()

gpstation = station.groupby(by="Suburb").count().reset_index()

gpstation = gpstation.rename(columns={'STOP_ID': 'No_of_train_station'})

gpstation.head()

"""##Charity"""

charity = pd.read_csv('charity_v2.csv')

charity = charity.rename(columns={'Town_City': 'Suburb'})

charity.head()

charity.columns

"""###Child charity"""

childcharity = charity.loc[(charity['Children'] == 'Y') | (charity['Early_Childhood'] == 'Y'),['ABN','Suburb']]

childcharity.head()

childcharity = childcharity.dropna()
childcharity

childcharity['Suburb'] = childcharity['Suburb'].apply(lambda x: x.lower())

childcharity

gpchildcharity = childcharity.groupby(by="Suburb").count().reset_index()
gpchildcharity = gpchildcharity.rename(columns={'ABN': 'No_of_child_charity'})
gpchildcharity.head()

gpchildcharity['Suburb'] = gpchildcharity['Suburb'].replace({'73 grey street, st kilda west':'west st kilda'})
gpchildcharity['Suburb'] = gpchildcharity['Suburb'].replace({'315 aqueduct road':'st helena'})

gpchildcharity.head()

"""##charity for adult, single mother, families"""

charity.head()

adultcharity = charity.loc[(charity['Adults'] == 'Y') | (charity['Families'] == 'Y') | (charity['Females'] == 'Y')| (charity['Financially_Disadvantaged'] == 'Y')| (charity['People_at_risk_of_homelessness'] == 'Y')| (charity['Unemployed_Person'] == 'Y'),['ABN','Suburb']]

adultcharity = adultcharity.dropna()

adultcharity['Suburb'] = adultcharity['Suburb'].apply(lambda x: x.lower())

adultcharity.head()

gpadultcharity = adultcharity.groupby(by="Suburb").count().reset_index()
gpadultcharity = gpadultcharity.rename(columns={'ABN': 'No_of_adult_charity'})

gpadultcharity['Suburb'] = gpadultcharity['Suburb'].replace({'73 grey street, st kilda west':'west st kilda'})

gpadultcharity.head()

"""##school data"""

school = pd.read_csv('school.csv',sep=",", encoding='mac_roman')
school.head()

school['School_Type'].unique()

school = school.loc[:,["School_Type","Address_Town","School_Name"]]

school

school = school.dropna()
school = school.rename(columns={'Address_Town': 'Suburb'})
school['Suburb'] = school['Suburb'].apply(lambda x: x.lower())

school.head()

gpschool = school.groupby(by=["Suburb","School_Type"])['School_Name'].count().reset_index()

gpschool = gpschool.rename(columns={'School_Name': 'No_of_school'})

gpschool['School_Type'].unique()

gpschool = gpschool[(gpschool['School_Type'] == 'Pri/Sec') | (gpschool['School_Type'] == 'Primary') | (gpschool['School_Type'] == 'Secondary')]

gpschool

gpschool['No_of_school'].unique()

"""##merge dataframe"""

merge1 = house.merge(gpchildcharity, on='Suburb', how='left')

merge2 = merge1.merge(gpadultcharity, on='Suburb', how='left')

merge3 = merge2.merge(gpbus, on='Suburb', how='left')

merge4 = merge3.merge(gpstation, on='Suburb', how='left')

merge5 = merge4.merge(gpschool, on='Suburb', how='left')

merge5.head()

merge5=merge5.fillna(0)

merge5 = merge5.iloc[:,1:]

merge5.to_csv('train.csv')
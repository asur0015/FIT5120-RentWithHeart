# -*- coding: utf-8 -*-
"""clustering model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZN1qBqCBh0mstMeAsD8Fc2twaBIzJAPV
"""

!pip3 install category_encoders

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import category_encoders as ce

train_df = pd.read_csv('train.csv')

train_df = train_df.iloc[:,1:]

train_df.head()

train_df.drop(['Year'],axis = 1, inplace = True)

train_df['School_Type'].unique()

train_df.isnull().sum()

train_df

"""##Encode categorial variable"""

#by using one hot encoder

ce_OHE = ce.OneHotEncoder(cols=['Housing_Type','School_Type'])

train_df1 = ce_OHE.fit_transform(train_df)
train_df1.head()

train_df1.shape

"""##Scale data"""

from sklearn.preprocessing import StandardScaler, RobustScaler

std_scaler = StandardScaler()
rob_scaler = RobustScaler()

train_df1['Scaled_Value'] = rob_scaler.fit_transform(train_df1['Value'].values.reshape(-1,1))
train_df1['Scaled_No_of_child_charity'] = rob_scaler.fit_transform(train_df1['No_of_child_charity'].values.reshape(-1,1))
train_df1['Scaled_No_of_adult_charity'] = rob_scaler.fit_transform(train_df1['No_of_adult_charity'].values.reshape(-1,1))
train_df1['Scaled_No_of_bus_stop'] = rob_scaler.fit_transform(train_df1['No_of_bus_stop'].values.reshape(-1,1))
train_df1['Scaled_No_of_train_station'] = rob_scaler.fit_transform(train_df1['No_of_train_station'].values.reshape(-1,1))
train_df1['Scaled_No_of_school'] = rob_scaler.fit_transform(train_df1['No_of_school'].values.reshape(-1,1))

train_df2 = ce_OHE.fit_transform(train_df)

train_df2['Scaled_Value'] = std_scaler.fit_transform(train_df1['Value'].values.reshape(-1,1))
train_df2['Scaled_No_of_child_charity'] = std_scaler.fit_transform(train_df1['No_of_child_charity'].values.reshape(-1,1))
train_df2['Scaled_No_of_adult_charity'] = std_scaler.fit_transform(train_df1['No_of_adult_charity'].values.reshape(-1,1))
train_df2['Scaled_No_of_bus_stop'] = std_scaler.fit_transform(train_df1['No_of_bus_stop'].values.reshape(-1,1))
train_df2['Scaled_No_of_train_station'] = std_scaler.fit_transform(train_df1['No_of_train_station'].values.reshape(-1,1))
train_df2['Scaled_No_of_school'] = std_scaler.fit_transform(train_df1['No_of_school'].values.reshape(-1,1))

train_df1.drop(['Value', 'No_of_child_charity','No_of_adult_charity','No_of_bus_stop','No_of_train_station','No_of_school'],axis = 1, inplace = True)

train_df1 #used robust scaler

train_df2.drop(['Value', 'No_of_child_charity','No_of_adult_charity','No_of_bus_stop','No_of_train_station','No_of_school'],axis = 1, inplace = True)

train_df2 #used standard scaler

train_df1 = train_df1.sample(frac = 1)
train_df2 = train_df2.sample(frac = 1)

train_df2

"""##Split data and build the knn model"""

#create a dataframe with all training data except the target column
X = train_df1.drop(columns=['Suburb'])
#check that the target variable has been removed
X.head()

y = train_df1['Suburb'].values
y[0:5]

def find_best_clusters(df, maximum_K):
    
    clusters_centers = []
    k_values = []
    
    for k in range(1, maximum_K):
        
        kmeans_model = KMeans(n_clusters = k)
        kmeans_model.fit(df)
        
        clusters_centers.append(kmeans_model.inertia_)
        k_values.append(k)
        
    
    return clusters_centers, k_values

def generate_elbow_plot(clusters_centers, k_values):
    
    figure = plt.subplots(figsize = (12, 6))
    plt.plot(k_values, clusters_centers, 'o-', color = 'orange')
    plt.xlabel("Number of Clusters (K)")
    plt.ylabel("Cluster Inertia")
    plt.title("Elbow Plot of KMeans")
    plt.show()

clusters_centers, k_values = find_best_clusters(X, 12)

generate_elbow_plot(clusters_centers, k_values)

from sklearn.model_selection import train_test_split
#split dataset into train and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)

from sklearn.neighbors import KNeighborsClassifier
# Create KNN classifier
knn = KNeighborsClassifier(n_neighbors = 4)
# Fit the classifier to the data
knn.fit(X_train,y_train)

X_test

knn.predict(X_test)[0:10]

knn.score(X_test, y_test)

train_df1.columns

"""##Get input data and predict the suburb"""

#expected input from users
#prefer housing type
#budget (per week)
#have kids or not
#age range of kids

userinput = pd.DataFrame(columns = ['Suburb', 'Housing_Type_1', 'Housing_Type_2', 'Housing_Type_3',
       'Housing_Type_4', 'Housing_Type_5', 'Housing_Type_6', 'Housing_Type_7',
       'School_Type_1', 'School_Type_2', 'School_Type_3', 'School_Type_4',
       'Scaled_Value', 'Scaled_No_of_child_charity',
       'Scaled_No_of_adult_charity', 'Scaled_No_of_bus_stop',
       'Scaled_No_of_train_station', 'Scaled_No_of_school'])

housetype = input('What is your prefer housing type?\n')

housetype = '1 bedroom flats'

budget = input('What is your budget? (per week) \n')

#input('Do you have kids?')
#if yes
kidage = int(input('What is the age of your kids? \n'))

kidage

#['Primary', 'Secondary', '0', 'Pri/Sec']
if kidage >= 5 and kidage <= 12:
  school_type = 'Primary'
elif kidage >= 12 and kidage <= 18:
  school_type = 'Secondary'

school_type

max_child = train_df['No_of_child_charity'].median()
max_adult = train_df['No_of_adult_charity'].median()
max_bus = train_df['No_of_bus_stop'].median()
max_train = train_df['No_of_train_station'].median()
max_school = train_df['No_of_school'].median()

train_df.head()

new_row = {'Suburb': 0, 'Housing_Type': housetype, 'Value': budget, 'No_of_child_charity' : max_child, 'No_of_adult_charity' : max_adult, 'No_of_bus_stop' : max_bus, 
           'No_of_train_station':max_train, 'School_Type':school_type, 'No_of_school':max_school}

new_row

train_df.loc[len(train_df)] = new_row

train_df.tail(1)

#by using one hot encoder

ce_OHE = ce.OneHotEncoder(cols=['Housing_Type','School_Type'])

train_dftest = ce_OHE.fit_transform(train_df)
train_dftest.tail(1)

from sklearn.preprocessing import StandardScaler, RobustScaler

std_scaler = StandardScaler()
rob_scaler = RobustScaler()

train_dftest['Scaled_Value'] = rob_scaler.fit_transform(train_dftest['Value'].values.reshape(-1,1))
train_dftest['Scaled_No_of_child_charity'] = rob_scaler.fit_transform(train_dftest['No_of_child_charity'].values.reshape(-1,1))
train_dftest['Scaled_No_of_adult_charity'] = rob_scaler.fit_transform(train_dftest['No_of_adult_charity'].values.reshape(-1,1))
train_dftest['Scaled_No_of_bus_stop'] = rob_scaler.fit_transform(train_dftest['No_of_bus_stop'].values.reshape(-1,1))
train_dftest['Scaled_No_of_train_station'] = rob_scaler.fit_transform(train_dftest['No_of_train_station'].values.reshape(-1,1))
train_dftest['Scaled_No_of_school'] = rob_scaler.fit_transform(train_dftest['No_of_school'].values.reshape(-1,1))

train_dftest.tail(1)

train_dftest.drop(['Value', 'No_of_child_charity','No_of_adult_charity','No_of_bus_stop','No_of_train_station','No_of_school'],axis = 1, inplace = True)

train_dftest.drop(columns=['Suburb'],axis = 1, inplace = True)

trial = train_dftest.tail(1)

knn.predict(trial)